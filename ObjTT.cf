terminator Decl "" ;

DAxiom.    Decl ::= Name ":" Exp ";" ;
-- DDef.      Decl ::= Name ":" Exp ":=" Exp ";" ;

-- Syntax for identity types
EId.       Exp  ::= Exp1 "=" Exp1 ;
ERefl.     Exp1 ::= "refl" Exp2 ;
EIdRec.    Exp2 ::= "idrec" "(" Name Name Name "." Exp
                            "," Exp
                            "," Name "." Exp
                            ")" ;
EIdConv.   Exp2 ::= "idconv" "(" Name Name Name "." Exp
                             "," Exp
                             "," Name "." Exp
                             ")" ;

-- Syntax for Pi types
EPi.       Exp  ::= "(" Name ":" Exp ")" To Exp ;
ELam.      Exp  ::= Lambda "(" Name ":" Exp ")" To Exp ;
EApp.      Exp1 ::= Exp1 Exp2 ;
EBetaConv. Exp2 ::= "betaconv" "(" Exp "," "[" Name "]" Exp ")" ;

EVar.      Exp2 ::= Name ;
EUniv.     Exp2 ::= "U";
EEl.       Exp1 ::= "El" Exp2;

coercions Exp 2;

comment "--" ;
comment "{-" "-}" ;

-- This must be before token Name otherwise the → is not recognized as token To.
token To     {"->"} | '→';
token Lambda '\\' | 'λ';

token Name (char - [ "-()[]{}.,;@\" \n\r\t\f" ]) + ;
  -- Both too liberal and too restrictive:
  -- Only excluding Agdas reserved symbols (too liberal).
  -- Excluding "-" for the sake of comments (too restrictive).
