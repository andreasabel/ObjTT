id : (T : U) -> (x : El(T)) -> El(T) ;
id_def : id = (\ (T : U) -> \ (x : El(T)) -> x) ;

apply : (T : U) -> (V : U) -> (f : (x : El(T)) -> El(V)) -> (x : El(T)) -> El(V);
apply_def : apply = (\ (T : U) -> \ (V : U) -> \ (f : (x : El(T)) -> El(V)) -> \ (x : El(T)) -> f x);

refl_path : (A : U) -> (a : El(A)) -> a = a;
refl_path_def : refl_path = (\ (A : U) -> \ (a : El(A)) -> refl(a));

invert_path : (A : U) -> (a : El(A)) -> (a' : El(A)) -> (p : a = a') -> (a' = a);
invert_path_def :
  invert_path =
  (\ (A : U) -> \ (a : El(A)) -> \ (a' : El(A)) -> \ (p : a = a') ->
    idrec([x,y,u] (y = x), p, [z] refl z));

subst : (A : U) -> (P : (a : El(A)) -> U) -> (a : El(A)) -> (b : El(A)) -> (p : a = b) -> (h : El (P a)) -> El (P b);
subst_def :
  subst =
  (\ (A : U) -> \ (P : (a : El(A)) -> U) -> \ (a : El(A)) -> \ (b : El(A)) -> \ (p : a = b) ->
    idrec( [x,y,u] (h : El (P x)) -> El (P y)
         , p
         , [x] \(h : El (P x)) -> h
         )
  );

compose_paths : (A : U) → (a1 : El A) → (a2 : El A) → (a3 : El A) → (p : a1 = a2) → (q : a2 = a3) → a1 = a3;
compose_paths_def :
  compose_paths =
  (λ (A : U) → λ (a1 : El A) → λ (a2 : El A) → λ (a3 : El A) → λ (p : a1 = a2) →
    idrec( [x,y,u] (r : y = a3) → x = a3
         , p
         , [x] λ (r : x = a3) → r
         )
  );

{-
Γ,x∈A,y∈A,u∈x=y ⊢P ∈ Type
Γ ⊢p ∈ a = b
Γ,x ∈ A ⊢ d ∈ P[x,x,refl(A,x)/x,y,u]
-------------------------------------------------
Γ ⊢ idrec(A,[x,y,u]P,a,b,p,[x]d) ∈ P[a,b,p/x,y,u]
-}